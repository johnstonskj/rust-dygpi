/*!
One-line description.

More detailed description, with

# Example

*/

use dygpi::plugin::Plugin;

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

#[derive(Debug)]
pub struct MyPlugin {
    name: String,
}

// ------------------------------------------------------------------------------------------------
// Private Types
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

impl Plugin for MyPlugin {
    fn plugin_id(&self) -> &String {
        &self.name
    }

    fn on_load(&self) -> dygpi::error::Result<()> {
        Ok(())
    }

    fn on_unload(&self) -> dygpi::error::Result<()> {
        Ok(())
    }
}

impl MyPlugin {
    pub fn new(name: &str) -> Self {
        Self {
            name: name.to_string(),
        }
    }

    pub fn hello(&self) {
        println!("hello from {}!", self.plugin_id());
    }
}

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------
